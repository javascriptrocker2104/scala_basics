[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Анна\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Анна\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.3 (Eclipse Adoptium Java 17.0.8)
[debug]       Load.loadUnit: plugins took 834.8167ms
[debug]       Load.loadUnit: defsScala took 0.5014ms
[debug] [Loading] Scanning directory C:\Users\Анна\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Анна\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 328.2054 ms
[debug]           Load.resolveProject(global-plugins) took 821.1113ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Анна\.sbt\1.0\plugins, plugins: List(<none>))) took 1223.3915ms
[debug] [Loading] Done in C:\Users\Анна\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 1368.3012ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3765ms
[debug]     Load.loadUnit(file:/C:/Users/Анна/.sbt/1.0/plugins/, ...) took 2311.6716ms
[debug]   Load.apply: load took 3460.4208ms
[debug]   Load.apply: resolveProjects took 17.023ms
[debug]   Load.apply: finalTransforms took 359.8327ms
[debug]   Load.apply: config.delegates took 24.972ms
[debug]   Load.apply: Def.make(settings)... took 3438.0843ms
[debug]   Load.apply: structureIndex took 1912.5569ms
[debug]   Load.apply: mkStreams took 7.9756ms
[info] loading global plugins from C:\Users\Анна\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 23530.9087ms
[debug]           Load.loadUnit: plugins took 56.9544ms
[debug]           Load.loadUnit: defsScala took 0.0093ms
[debug] [Loading] Scanning directory C:\Users\Анна\IdeaProjects\scala\project
[debug]             Load.loadUnit: mkEval took 11.7918ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Анна\IdeaProjects\scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 7.771 ms
[info] loading settings for project scala-build from idea.sbt ...
[debug]               Load.resolveProject(scala-build) took 12.2776ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala-build, base: C:\Users\Анна\IdeaProjects\scala\project, plugins: List(<none>))) took 22.6404ms
[debug] [Loading] Done in C:\Users\Анна\IdeaProjects\scala\project, returning: (scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 11148.3862ms
[debug]           Load.loadUnit: cleanEvalClasses took 17.8054ms
[debug]         Load.loadUnit(file:/C:/Users/Анна/IdeaProjects/scala/project/, ...) took 11225.189ms
[debug]       Load.apply: load took 11229.7327ms
[debug]       Load.apply: resolveProjects took 0.5084ms
[debug]       Load.apply: finalTransforms took 61.1821ms
[debug]       Load.apply: config.delegates took 5.9955ms
[debug]       Load.apply: Def.make(settings)... took 653.9292ms
[debug]       Load.apply: structureIndex took 366.2827ms
[debug]       Load.apply: mkStreams took 0.005ms
[info] loading project definition from C:\Users\Анна\IdeaProjects\scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 17987.6018ms
[debug]     Load.loadUnit: defsScala took 0.005ms
[debug] [Loading] Scanning directory C:\Users\Анна\IdeaProjects\scala
[debug]       Load.loadUnit: mkEval took 1.2509ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.227 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 65.948ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Анна\IdeaProjects\scala, plugins: List(<none>))) took 72.9115ms
[debug] [Loading] Done in C:\Users\Анна\IdeaProjects\scala, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4837.0322ms
[debug]     Load.loadUnit: cleanEvalClasses took 31.0694ms
[debug]   Load.loadUnit(file:/C:/Users/Анна/IdeaProjects/scala/, ...) took 22856.8329ms
[debug] Load.apply: load took 22859.2122ms
[debug] Load.apply: resolveProjects took 0.1383ms
[debug] Load.apply: finalTransforms took 97.106ms
[debug] Load.apply: config.delegates took 0.568ms
[debug] Load.apply: Def.make(settings)... took 175.7432ms
[debug] Load.apply: structureIndex took 35.6432ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to scala (in build file:/C:/Users/Анна/IdeaProjects/scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51520 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51520, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala (in build file:/C:/Users/Анна/IdeaProjects/scala/)
[debug] > Exec(idea-shell, None, None)
